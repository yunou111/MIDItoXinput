<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MIDI-XInputコントローラー応答速度テスト</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 20px;
            color: white;
            min-height: 100vh;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }
        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        .test-area {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            padding: 30px;
            margin: 20px 0;
            text-align: center;
            min-height: 200px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            transition: all 0.3s ease;
        }
        .test-area.waiting {
            background: rgba(255, 193, 7, 0.3);
            border: 3px solid #ffc107;
        }
        .test-area.ready {
            background: rgba(220, 53, 69, 0.3);
            border: 3px solid #dc3545;
        }
        .test-area.go {
            background: rgba(40, 167, 69, 0.3);
            border: 3px solid #28a745;
        }
        .status {
            font-size: 2em;
            font-weight: bold;
            margin-bottom: 20px;
        }
        .instruction {
            font-size: 1.3em;
            margin-bottom: 20px;
        }
        .result {
            font-size: 1.8em;
            font-weight: bold;
            color: #ffc107;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }
        .stat-box {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 20px;
            text-align: center;
        }
        .stat-value {
            font-size: 2em;
            font-weight: bold;
            color: #28a745;
        }
        .stat-label {
            margin-top: 10px;
            opacity: 0.8;
        }
        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 30px;
        }
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 25px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            background: linear-gradient(45deg, #28a745, #20c997);
            color: white;
        }
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }
        .controller-status {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
        }
        .connected {
            color: #28a745;
        }
        .disconnected {
            color: #dc3545;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>?? MIDI-XInputコントローラー テスト</h1>
        
        <div class="controller-status">
            <h3>コントローラー状態: <span id="controllerStatus" class="disconnected">未接続</span></h3>
            <div id="controllerInfo"></div>
        </div>

        <div class="test-area" id="testArea">
            <div class="status" id="status">準備完了</div>
            <div class="instruction" id="instruction">
                「テスト開始」をクリックしてください<br>
                画面が緑になったら即座にボタンを押してください
            </div>
            <div class="result" id="result"></div>
        </div>

        <div class="controls">
            <button class="btn" id="startBtn" onclick="startTest()">テスト開始</button>
            <button class="btn" onclick="resetStats()">統計リセット</button>
        </div>

        <div class="stats">
            <div class="stat-box">
                <div class="stat-value" id="avgTime">--</div>
                <div class="stat-label">平均応答時間 (ms)</div>
            </div>
            <div class="stat-box">
                <div class="stat-value" id="bestTime">--</div>
                <div class="stat-label">最速応答時間 (ms)</div>
            </div>
            <div class="stat-box">
                <div class="stat-value" id="testCount">0</div>
                <div class="stat-label">テスト回数</div>
            </div>
            <div class="stat-box">
                <div class="stat-value" id="rating">--</div>
                <div class="stat-label">評価</div>
            </div>
        </div>
    </div>

    <script>
        let gamepad = null;
        let testActive = false;
        let startTime = 0;
        let results = [];
        let animationFrame;

        // ゲームパッド接続チェック
        function checkGamepad() {
            const gamepads = navigator.getGamepads();
            gamepad = null;
            for (let i = 0; i < gamepads.length; i++) {
                if (gamepads[i]) {
                    gamepad = gamepads[i];
                    break;
                }
            }
            
            const statusEl = document.getElementById('controllerStatus');
            const infoEl = document.getElementById('controllerInfo');
            
            if (gamepad) {
                statusEl.textContent = '接続済み';
                statusEl.className = 'connected';
                infoEl.textContent = `コントローラー: ${gamepad.id}`;
            } else {
                statusEl.textContent = '未接続';
                statusEl.className = 'disconnected';
                infoEl.textContent = 'MIDIキーボードをコントローラーとして接続してください';
            }
        }

        // ボタン押下チェック
        function checkButtonPress() {
            if (!gamepad || !testActive) return false;
            
            const currentGamepad = navigator.getGamepads()[gamepad.index];
            if (!currentGamepad) return false;
            
            // 任意のボタンが押されたかチェック
            for (let i = 0; i < currentGamepad.buttons.length; i++) {
                if (currentGamepad.buttons[i].pressed) {
                    return true;
                }
            }
            return false;
        }

        function startTest() {
            if (!gamepad) {
                alert('コントローラーが接続されていません！');
                return;
            }

            const testArea = document.getElementById('testArea');
            const status = document.getElementById('status');
            const instruction = document.getElementById('instruction');
            const result = document.getElementById('result');
            const startBtn = document.getElementById('startBtn');
            
            startBtn.disabled = true;
            result.textContent = '';
            
            // 準備期間（ランダム2-5秒）
            const waitTime = Math.random() * 3000 + 2000;
            
            testArea.className = 'test-area waiting';
            status.textContent = '準備中...';
            instruction.textContent = `待機してください（${Math.round(waitTime/1000)}秒後に開始）`;
            
            setTimeout(() => {
                testArea.className = 'test-area ready';
                status.textContent = '準備...';
                instruction.textContent = '画面が緑になるまで待ってください';
                
                setTimeout(() => {
                    testArea.className = 'test-area go';
                    status.textContent = '今だ！';
                    instruction.textContent = '任意のボタンを押してください！';
                    startTime = performance.now();
                    testActive = true;
                    
                    // ボタン押下監視開始
                    function checkPress() {
                        if (testActive) {
                            if (checkButtonPress()) {
                                endTest();
                            } else {
                                animationFrame = requestAnimationFrame(checkPress);
                            }
                        }
                    }
                    checkPress();
                    
                    // 5秒でタイムアウト
                    setTimeout(() => {
                        if (testActive) {
                            testActive = false;
                            testArea.className = 'test-area';
                            status.textContent = 'タイムアウト';
                            instruction.textContent = '反応が遅すぎます。もう一度試してください。';
                            startBtn.disabled = false;
                        }
                    }, 5000);
                }, 1000);
            }, waitTime);
        }

        function endTest() {
            testActive = false;
            if (animationFrame) {
                cancelAnimationFrame(animationFrame);
            }
            
            const reactionTime = Math.round(performance.now() - startTime);
            results.push(reactionTime);
            
            const testArea = document.getElementById('testArea');
            const status = document.getElementById('status');
            const instruction = document.getElementById('instruction');
            const result = document.getElementById('result');
            const startBtn = document.getElementById('startBtn');
            
            testArea.className = 'test-area';
            status.textContent = '結果';
            instruction.textContent = `応答時間: ${reactionTime}ms`;
            
            let rating = '';
            if (reactionTime < 200) rating = '優秀！';
            else if (reactionTime < 250) rating = '良好';
            else if (reactionTime < 300) rating = '普通';
            else rating = '要改善';
            
            result.textContent = `評価: ${rating}`;
            
            updateStats();
            startBtn.disabled = false;
        }

        function updateStats() {
            if (results.length === 0) return;
            
            const avg = Math.round(results.reduce((a, b) => a + b, 0) / results.length);
            const best = Math.min(...results);
            const count = results.length;
            
            let rating = '';
            if (avg < 200) rating = '優秀';
            else if (avg < 250) rating = '良好';
            else if (avg < 300) rating = '普通';
            else rating = '要改善';
            
            document.getElementById('avgTime').textContent = avg;
            document.getElementById('bestTime').textContent = best;
            document.getElementById('testCount').textContent = count;
            document.getElementById('rating').textContent = rating;
        }

        function resetStats() {
            results = [];
            document.getElementById('avgTime').textContent = '--';
            document.getElementById('bestTime').textContent = '--';
            document.getElementById('testCount').textContent = '0';
            document.getElementById('rating').textContent = '--';
        }

        // 定期的にゲームパッド状態をチェック
        setInterval(checkGamepad, 1000);
        checkGamepad();
    </script>
</body>
</html>
